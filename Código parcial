//Código Del parcial 1

//LINEAS DE CÓDIGO DONDE SE DECLARA E INICIALIZA LA MATRIZ 8X8:-----------------------------------------------------------------------------------------------------

    int filas=8;
    int columnas=8;
    int **matriz= new int*[filas];
    for (int i=0;i<filas;i++){
        matriz[i]=new int[columnas];
    }
    crear_matriz_incial(matriz,filas,columnas);

//NO SE DEBE OLVIDAR ELIMINAR LA MATRIZ AL FINAL PARA QUE LIBERE LOS ESPACIOS DE MEMORIA-------------------------------------------------------------

    for(int j=0;j<filas;j++){ 
        delete[]matriz[j];
    }                   
    delete[]matriz;

//FUNCIÓN QUE SE ENCARGA DE DARLE LOS VALORES INICIALES A LA MATRIIZ. TODOS LOS VALORES SERÁN 0 ------------------------------------------------------------------------

    void crear_matriz_incial(int** matriz,int num_filas,int num_columnas)
    {
        for(int filas=0;filas<num_filas;filas++){
            for(int columnas=0;columnas<num_columnas;columnas++){
                matriz[filas][columnas]=0;
            }
        }
    }

//FUNCIÓN DEL PATRÓN 1. PONE UN VALOR DE 1 EN LAS POSICIONES DE LOS LEDS QUE DEBEN IR ENCENDIDOS SIGUIENDO LA LÓGICA DEL PATRÓN----------------------------------------------------

    void matriz_binaria_patron1(int **matriz, int num_filas,int num_columnas){
        int tam=8;
        int primera=(tam/2)-1;
        int ultima=tam/2;
    
    
        for(int i=0;i<tam;i++){
            if(i>=4){
                primera++;
                ultima-=1;
            }
            for(int j=0;j<tam;j++){
                if(j>=primera && j<=ultima){
                    matriz[i][j]=1;
                }
            }
            if(i<4){
                primera-=1;
                ultima++;
            }
        }
    }

//FUNCIÓN DEL PATRÓN 2. PONE VUN VALOR DE 1 EN LAS POSICIONES DE LOS LEDS QUE DEBEN IR ENCENDIDOS SIGUIENDO LA LÓGICA DEL PATRÓN ---------------------------------------------------------------------

        void matriz_binaria_patron2(int **matriz,int filas,int columnas){
            int tam=8;
            int ultima=tam-1;
            int primera=0;
        
            for(int i=0;i<tam;i++){
                if(i<4){
                    matriz[i][primera]=1;
                    matriz[i][ultima]=1;
                    primera++;
                    ultima--;
                }
                else{
                    primera--;
                    ultima++;
                    matriz[i][primera]=1;
                    matriz[i][ultima]=1;
                }
            }
        }

//FUNCIÓN QUE RECORRE LA MATRIZ BIDIMENSIONAL Y CONVIERTE CADA ARREGLO BINARIO A SU EQUIVALENTE DECIMAL GUARDANDO CADA EQUIVALENTE EN UNA POSICION DE UN ARREGLO

        void convertir_binario_a_decimal(int**matriz,int*arreglo_decimales){
        
            int tam=8;
            int cont_potencia=0;
            int suma_actual=0;
            int veces_multiplicadas=0;
            int potencia_actual=0;
        
            for(int i=0;i<tam;i++){
                cont_potencia=0;
                suma_actual=0;
                for(int j=7;j>=0;j--){
                    if(matriz[i][j]==1){
                        if(j==7){
                            suma_actual++;
                        }
                        else{
                            veces_multiplicadas=0;
                            potencia_actual=1;
                            while(veces_multiplicadas<cont_potencia){
                                potencia_actual=(potencia_actual*2);
                                veces_multiplicadas++;
                            }
                            suma_actual+=potencia_actual;
                        }
                    }
                    else{
                        arreglo_decimales[i]=0;
                    }
                cont_potencia++;
                }
                arreglo_decimales[i]=suma_actual;
            }
        }

//FUNCIÓN VERIFICAR- LA QUE SE ENCARGA DE ENCENDER TODOS LOS LEDS DETERMINADA CANTIDAD DE VECES Y CADA CIERTO TIEMPO
    void verificar(int tiempo, int veces){
  for(int i=0;i<veces;i++){
	ledWrite(255,255,255,255,255,255,255,255);
    delay(tiempo);
    ledWrite(0,0,0,0,0,0,0,0);
    delay(tiempo);
  }
}
